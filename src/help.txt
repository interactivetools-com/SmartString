SmartString: Enhanced Strings with Automatic HTML Encoding and Chainable Utility Methods
============================================================================================
SmartString automatically HTML-encodes output in string contexts for XSS protection and
provides powerful chainable utility methods for encoding, formatting, and text manipulation.

Creating SmartStrings
----------------------
$str = SmartString::new("It's easy!<hr>");
$req = SmartArray::new($_REQUEST)->asHtml();            // Create a SmartArray of SmartStrings

// Advanced: For direct instantiation with a specific type:
// $html = SmartArrayHtml::new($data);   // Direct creation of HTML-safe SmartArray
// $raw  = SmartArrayRaw::new($data);    // Direct creation of raw-value SmartArray

Value access
-------------
$str->value()              // Access original value and type
$str->rawHtml()            // Alias for ->value(), useful for making it clear you're outputting trusted HTML content
"{$str->value()}"          // Output original value in string context
"{$str->rawHtml()}"        // Output original value in string context
print_r($str)              // show object value in a readable debug format (for developers)

Automatic HTML-encoding in string contexts
-------------------------------------------
$str = SmartString::new("It's easy!<hr>");
echo $str;                 // "It&apos;s easy!&lt;hr&gt;"
print $str;                // "It&apos;s easy!&lt;hr&gt;"
(string) $str;             // "It&apos;s easy!&lt;hr&gt;"
$new = $str."\n";          // "It&apos;s easy!&lt;hr&gt;\n"
echo $str->value();        // "It's easy!<hr>" (original value)

Type conversion (returns value)
--------------------------------
->string()                 Returns value as string (doesn't HTML-encode, use ->htmlEncode() for HTML-encoded string)
->int()                    Returns value as integer
->bool()                   Returns value as boolean
->float()                  Returns value as float

Encoding methods (returns value)
---------------------------------
->value()                  Returns original value and type
->rawHtml()                Alias for ->value(), for when you want to make it clear you're outputting trusted unencoded HTML content
->urlEncode()              Returns URL-encoded string, example: "?user={$user->name->urlEncode()}"
->jsonEncode()             Returns JSON-encoded value, example: "let user={$user->name->jsonEncode()}"
->htmlEncode()             Returns HTML-encoded string (same as automatic encoding, for readability and non-string contexts)

String Manipulation (returns object, chainable)
------------------------------------------------
->textOnly(...)            Remove HTML tags, decode HTML entities, and trims whitespace
->nl2br()                  Convert newlines to br tags
->trim(...)                Trim leading and trailing whitespace, supports same parameters as trim()
->maxWords($max)           Limit words to $max, if truncated adds ... (override with second parameter)
->maxChars($max)           Limit chars to $max, if truncated adds ... (override with second parameter)

Formatting (returns object, chainable)
---------------------------------------
->numberFormat(...)        Format number, args: $decimals = 0
->dateFormat(...)          Format date in default format or date() format (e.g., "Y-m-d")
->dateTimeFormat(...)      Format date/time in default format or date() format (e.g., "Y-m-d H:i:s")
->phoneFormat()            Format phone number in your default format

Numeric Operations (returns object, chainable)
-----------------------------------------------
->percent($decimals, $zeroFallback)  Returns value as a percentage, e.g. 0.5 becomes 50%, with optional fallback value if result is zero
->percentOf($total, $decimals)       Returns value as a percentage of $total, e.g., 24 of 100 becomes 24%
->add($value)                        Returns value plus $value
->subtract($value)                   Returns value minus $value
->divide($value)                     Returns value divided by $value
->multiply($value)                   Returns value multiplied by $value

Note: Null values are treated as zero in numeric operations. Non-numeric strings always become null.

Conditional Operations (returns object, chainable)
---------------------------------------------------
->or('replacement')        Replaces value if missing (null or ""), zero is not considered missing
->and('append')            Appends value if present (not null or ""), zero is considered present
->andPrefix('prefix')      Prepends value if present (not null or ""), zero is considered present
->ifBlank('replacement')   Replaces value only if it's a blank string ("")
->ifNull('replacement')    Replaces value only if it's null or undefined
->ifZero('replacement')    Replaces value only if it's zero (0, 0.0, "0", or "0.0")
->if($condition, $value)   Sets to $value only if $condition is true ($value can be a SmartString)
->set($value)              Sets to $value (accepts expression, e.g., match($itemCount->int()) { 0 => "No items", ... })

Validation (returns true/false)
-----------------------------
->isEmpty()                Returns true if the value is empty ("", null, false, 0, "0"), uses PHP empty()
->isNotEmpty()             Returns true if the value is NOT empty ("", null, false, 0, "0"), uses PHP !empty()
->isMissing()              Returns true if the value is missing (null or ""), zero is not considered missing
->isNull()                 Returns true if the value is null

Error Checking
--------------
->or404('message')         Sends 404 header and exits if the value is missing (null or ""), zero is not considered missing
->orDie('message')         Outputs message and exits if the value is missing (null or ""), zero is not considered missing
->orThrow('message')       Throws Exception with message if the value is missing (null or ""), zero is not considered missing
->orRedirect('url')        Redirects to URL if the value is missing (null or ""), zero is not considered missing

Miscellaneous
--------------
->apply()                  Apply a callback or function to the value, e.g. ->apply('strtoupper')
SmartString::getRawValue() Returns original value from Smart* objects while leaving other types unchanged, useful for working with mixed types

Working with arrays
--------------------
$user = ['id' => 42, 'name' => "John O'Reilly", "lastLogin" => "2024-09-10 14:30:00"];
$u    = SmartArray::new($user)->asHtml();            // SmartArray of SmartStrings
"Hello, $u->name"                                    // "Hello, John O&apos;Reilly"
"Hello, {$u->name->value()}"                         // Returns "Hello, John O'Reilly"
"Last login: {$u->lastLogin->dateFormat('F j, Y')}"  // "Last login: Sep 10, 2024"

Setting defaults (at the top of your script or in an init file)
----------------------------------------------------------------
SmartString::$treatNullAsZero       = true;            // Treat null as zero in numeric operations (default: true)
SmartString::$numberFormatDecimal   = '.';             // Default decimal separator
SmartString::$numberFormatThousands = ',';             // Default thousands separator
SmartString::$dateFormat            = 'Y-m-d';         // Default dateFormat() format
SmartString::$dateTimeFormat        = 'Y-m-d H:i:s';   // Default dateTimeFormat() format
SmartString::$phoneFormat           = [                // Default phone number formats
    ['digits' => 10, 'format' => '(###) ###-####'],
    ['digits' => 11, 'format' => '# (###) ###-####'],
];
